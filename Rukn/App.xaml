<Application x:Class="Rukn.App"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:vm="clr-namespace:Rukn.ViewModels"
             xmlns:sys="clr-namespace:System;assembly=System.Runtime"
             xmlns:converters="clr-namespace:Rukn.Converters"
             StartupUri="Views/MainWindow.xaml">
    <Application.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="Icons/Zondicons.xaml"/>
                <ResourceDictionary Source="Vectors/Vectors.xaml"/>

                <ResourceDictionary Source="Styles/LightColorPickerStyle.xaml"/>
            </ResourceDictionary.MergedDictionaries>
            
            <FontFamily x:Key="UthmanicHafs">pack://application:,,,/Fonts/#KFGQPC HAFS Uthmanic Script</FontFamily>
            <FontFamily x:Key="Bitter">pack://application:,,,/Fonts/#Bitter Pro</FontFamily>
            <FontFamily x:Key="Cairo">pack://application:,,,/Fonts/#Cairo</FontFamily>
            
            <BooleanToVisibilityConverter x:Key="BooleanToVisiblilityConverter"/>
            <converters:StringToResourceConverter x:Key="StringToResourceConverter"/>
            <converters:FontSizeConverter x:Key="FontSizeConverter"/>
            <converters:InverseBooleanConverter x:Key="InverseBooleanConverter"/>
            <converters:FontNameConverter x:Key="FontNameConverter"/>
            <converters:BorderClipConverter x:Key="BorderClipConverter"/>
            
            <ObjectDataProvider x:Key="ReferenceModeEnum"
                                MethodName="GetValues"
                                ObjectType="{x:Type sys:Enum}">
                <ObjectDataProvider.MethodParameters>
                    <x:Type TypeName="vm:ReferenceMode"/>
                </ObjectDataProvider.MethodParameters>
            </ObjectDataProvider>

            <Color x:Key="Color.Accent">#28664c</Color>
            <Color x:Key="Color.Accent.Light">#b8ccc2</Color>
            <Color x:Key="Color.Accent.Dark">#194030</Color>

            <SolidColorBrush x:Key="Brush.Accent" Color="{StaticResource Color.Accent}"/>
            <SolidColorBrush x:Key="Brush.Accent.Light" Color="{StaticResource Color.Accent.Light}"/>
            <SolidColorBrush x:Key="Brush.Accent.Dark" Color="{StaticResource Color.Accent.Dark}"/>

            <Color x:Key="Color.Text.Primary">#1f2937</Color>
            <Color x:Key="Color.Text.Secondary">#6b7280</Color>
            <Color x:Key="Color.Text.Disabled">#9ca3af</Color>

            <SolidColorBrush x:Key="Text.Primary" Color="{StaticResource Color.Text.Primary}"/>
            <SolidColorBrush x:Key="Text.Secondary" Color="{StaticResource Color.Text.Secondary}"/>
            <SolidColorBrush x:Key="Text.Disabled" Color="{StaticResource Color.Text.Disabled}"/>

            <Color x:Key="Color.Control.Background">#f5f5f5</Color>
            <Color x:Key="Color.Control.BorderBrush">#d4d4d4</Color>

            <SolidColorBrush x:Key="Control.Background" Color="{StaticResource Color.Control.Background}"/>
            <SolidColorBrush x:Key="Control.BorderBrush" Color="{StaticResource Color.Control.BorderBrush}"/>

            <Color x:Key="Color.Button.Background">#28664c</Color>
            <Color x:Key="Color.Button.Foreground">#ffffff</Color>
            <Color x:Key="Color.Button.BorderBrush">#00000000</Color>
            <Color x:Key="Color.Button.Hover.Background">#194030</Color>
            <Color x:Key="Color.Button.Pressed.Background">#ffffff</Color>
            <Color x:Key="Color.Button.Pressed.Foreground">#28664c</Color>
            <Color x:Key="Color.Button.Pressed.BorderBrush">#28664c</Color>

            <Color x:Key="Color.Button.Secondary.Background">#e5e7eb</Color>
            <Color x:Key="Color.Button.Secondary.Foreground">#6b7280</Color>
            <Color x:Key="Color.Button.Secondary.Hover.Background">#d1d5db</Color>
            <Color x:Key="Color.Button.Secondary.Pressed.Foreground">#6b7280</Color>
            <Color x:Key="Color.Button.Secondary.Pressed.BorderBrush">#6b7280</Color>

            <Color x:Key="Color.Button.Danger.Background">#b91c1c</Color>
            <Color x:Key="Color.Button.Danger.Foreground">#ffffff</Color>
            <Color x:Key="Color.Button.Danger.Hover.Background">#7f1d1d</Color>
            <Color x:Key="Color.Button.Danger.Pressed.Foreground">#b91c1c</Color>
            <Color x:Key="Color.Button.Danger.Pressed.BorderBrush">#b91c1c</Color>

            <SolidColorBrush x:Key="Button.Background" Color="{StaticResource Color.Button.Background}"/>
            <SolidColorBrush x:Key="Button.Foreground" Color="{StaticResource Color.Button.Foreground}"/>
            <SolidColorBrush x:Key="Button.BorderBrush" Color="{StaticResource Color.Button.BorderBrush}"/>
            <SolidColorBrush x:Key="Button.Hover.Background" Color="{StaticResource Color.Button.Hover.Background}"/>
            <SolidColorBrush x:Key="Button.Pressed.Background" Color="{StaticResource Color.Button.Pressed.Background}"/>
            <SolidColorBrush x:Key="Button.Pressed.Foreground" Color="{StaticResource Color.Button.Pressed.Foreground}"/>
            <SolidColorBrush x:Key="Button.Pressed.BorderBrush" Color="{StaticResource Color.Button.Pressed.BorderBrush}"/>

            <Style x:Key="ButtonPrimaryStyle" TargetType="Button">
                <Setter Property="Background" Value="{DynamicResource Button.Background}"/>
                <Setter Property="Foreground" Value="{DynamicResource Button.Foreground}"/>
                <Setter Property="BorderBrush" Value="{DynamicResource Button.BorderBrush}"/>
                <Setter Property="BorderThickness" Value="1"/>
                <Setter Property="Padding" Value="11,6"/>
                <Setter Property="FontWeight" Value="DemiBold"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="Button">
                            <Border Background="{TemplateBinding Background}"
                                    BorderBrush="{TemplateBinding BorderBrush}"
                                    BorderThickness="{TemplateBinding BorderThickness}"
                                    CornerRadius="5"
                                    Padding="{TemplateBinding Padding}">
                                <StackPanel Orientation="Horizontal"
                                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                                    <Path x:Name="icon"
                                          Data="{TemplateBinding Tag}"
                                          Fill="{TemplateBinding Foreground}"
                                          Margin="0,0,11,0"
                                          VerticalAlignment="Center"/>
                                    <ContentPresenter VerticalAlignment="Center"/>
                                </StackPanel>
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="Tag" Value="{x:Null}">
                                    <Setter TargetName="icon" Property="Visibility" Value="Collapsed"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
                <Style.Triggers>
                    <Trigger Property="IsMouseOver" Value="True">
                        <Setter Property="Background" Value="{DynamicResource Button.Hover.Background}"/>
                    </Trigger>
                    <Trigger Property="IsPressed" Value="True">
                        <Setter Property="BorderThickness" Value="1"/>
                        <Setter Property="Foreground" Value="{DynamicResource Button.Pressed.Foreground}"/>
                        <Setter Property="BorderBrush" Value="{DynamicResource Button.Pressed.BorderBrush}"/>
                        <Setter Property="Background" Value="{DynamicResource Button.Pressed.Background}"/>
                    </Trigger>
                </Style.Triggers>
            </Style>
            <Style x:Key="ButtonSecondaryStyle" TargetType="Button" BasedOn="{StaticResource ButtonPrimaryStyle}">
                <Style.Resources>
                    <SolidColorBrush x:Key="Button.Background" Color="{StaticResource Color.Button.Secondary.Background}"/>
                    <SolidColorBrush x:Key="Button.Foreground" Color="{StaticResource Color.Button.Secondary.Foreground}"/>
                    <SolidColorBrush x:Key="Button.Hover.Background" Color="{StaticResource Color.Button.Secondary.Hover.Background}"/>
                    <SolidColorBrush x:Key="Button.Pressed.Foreground" Color="{StaticResource Color.Button.Secondary.Pressed.Foreground}"/>
                    <SolidColorBrush x:Key="Button.Pressed.BorderBrush" Color="{StaticResource Color.Button.Secondary.Pressed.BorderBrush}"/>
                </Style.Resources>
            </Style>
            <Style x:Key="ButtonDangerStyle" TargetType="Button" BasedOn="{StaticResource ButtonPrimaryStyle}">
                <Style.Resources>
                    <SolidColorBrush x:Key="Button.Background" Color="{StaticResource Color.Button.Danger.Background}"/>
                    <SolidColorBrush x:Key="Button.Foreground" Color="{StaticResource Color.Button.Danger.Foreground}"/>
                    <SolidColorBrush x:Key="Button.Hover.Background" Color="{StaticResource Color.Button.Danger.Hover.Background}"/>
                    <SolidColorBrush x:Key="Button.Pressed.Foreground" Color="{StaticResource Color.Button.Danger.Pressed.Foreground}"/>
                    <SolidColorBrush x:Key="Button.Pressed.BorderBrush" Color="{StaticResource Color.Button.Danger.Pressed.BorderBrush}"/>
                </Style.Resources>
            </Style>

            <SolidColorBrush x:Key="Toggle.Background" Color="{StaticResource Color.Control.Background}"/>
            <SolidColorBrush x:Key="Toggle.BorderBrush" Color="{StaticResource Color.Control.BorderBrush}"/>
            <SolidColorBrush x:Key="Toggle.Foreground" Color="{StaticResource Color.Text.Secondary}"/>
            <SolidColorBrush x:Key="Toggle.Thumb.Background" Color="#ffffff"/>
            <SolidColorBrush x:Key="Toggle.Thumb.BorderBrush" Color="{StaticResource Color.Control.BorderBrush}"/>
            <SolidColorBrush x:Key="Toggle.Hover.BorderBrush" Color="{StaticResource Color.Accent}"/>
            <SolidColorBrush x:Key="Toggle.Checked.Background" Color="{StaticResource Color.Accent}"/>
            <SolidColorBrush x:Key="Toggle.Checked.BorderBrush" Color="{StaticResource Color.Accent}"/>
            <SolidColorBrush x:Key="Toggle.Checked.Thumb.Background" Color="#ffffff"/>
            <SolidColorBrush x:Key="Toggle.Checked.Thumb.BorderBrush" Color="Transparent"/>
            <SolidColorBrush x:Key="Toggle.Disabled.Foreground" Color="{StaticResource Color.Text.Disabled}"/>
            <SolidColorBrush x:Key="Toggle.Disabled.Thumb.Background" Color="{StaticResource Color.Control.BorderBrush}"/>
            <SolidColorBrush x:Key="Toggle.Disabled.Thumb.BorderBrush" Color="Transparent"/>
            <SolidColorBrush x:Key="Toggle.Checked.Disabled.Background" Color="{StaticResource Color.Accent.Light}"/>

            <Style x:Key="ToggleStyle" TargetType="ToggleButton">
                <Setter Property="OverridesDefaultStyle" Value="True"/>
                <Setter Property="Background" Value="{StaticResource Toggle.Background}"/>
                <Setter Property="Foreground" Value="{StaticResource Toggle.Foreground}"/>
                <Setter Property="MinHeight" Value="16"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="ToggleButton">
                            <Grid Background="Transparent">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition/>
                                    <ColumnDefinition Width="Auto"/>
                                </Grid.ColumnDefinitions>
                                <ContentPresenter Margin="0,0,8,0"/>
                                <Border x:Name="root" Background="{TemplateBinding Background}" CornerRadius="{Binding ElementName=rec, Path=ActualHeight}" Grid.Column="1">
                                    <Grid>
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition MinWidth="{Binding ElementName=root, Path=ActualHeight}"/>
                                            <ColumnDefinition MinWidth="{Binding ElementName=root, Path=ActualHeight}"/>
                                        </Grid.ColumnDefinitions>
                                        <Grid>
                                            <Grid.RowDefinitions>
                                                <RowDefinition/>
                                                <RowDefinition/>
                                            </Grid.RowDefinitions>
                                            <Control x:Name="rec"/>
                                        </Grid>
                                        <Rectangle x:Name="border" Stroke="{StaticResource Toggle.BorderBrush}" StrokeThickness="1" RadiusX="{Binding ElementName=rec, Path=ActualHeight}" RadiusY="{Binding ElementName=rec, Path=ActualHeight}" Grid.ColumnSpan="2"/>
                                        <Ellipse x:Name="thumb" Fill="{StaticResource Toggle.Thumb.Background}" Stroke="{StaticResource Toggle.Thumb.BorderBrush}" StrokeThickness="1" Margin="1"/>
                                    </Grid>
                                </Border>
                            </Grid>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsChecked" Value="True">
                                    <Setter TargetName="root" Property="Background" Value="{StaticResource Toggle.Checked.Background}"/>
                                    <Setter TargetName="border" Property="Stroke" Value="{StaticResource Toggle.Checked.BorderBrush}"/>
                                    <Setter TargetName="thumb" Property="Fill" Value="{StaticResource Toggle.Checked.Thumb.Background}"/>
                                    <Setter TargetName="thumb" Property="Stroke" Value="{StaticResource Toggle.Checked.Thumb.BorderBrush}"/>
                                    <Setter TargetName="thumb" Property="Margin" Value="2"/>
                                    <Setter TargetName="thumb" Property="Grid.Column" Value="1"/>
                                </Trigger>
                                <MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition Property="IsMouseOver" Value="True"/>
                                        <Condition Property="IsChecked" Value="False"/>
                                    </MultiTrigger.Conditions>
                                    <Setter TargetName="border" Property="Stroke" Value="{StaticResource Toggle.Hover.BorderBrush}"/>
                                </MultiTrigger>
                                <MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition Property="IsEnabled" Value="False"/>
                                        <Condition Property="IsChecked" Value="False"/>
                                    </MultiTrigger.Conditions>
                                    <Setter TargetName="thumb" Property="Fill" Value="{StaticResource Toggle.Disabled.Thumb.Background}"/>
                                    <Setter TargetName="thumb" Property="Stroke" Value="{StaticResource Toggle.Disabled.Thumb.BorderBrush}"/>
                                    <Setter TargetName="thumb" Property="Margin" Value="2"/>
                                </MultiTrigger>
                                <MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition Property="IsEnabled" Value="False"/>
                                        <Condition Property="IsChecked" Value="True"/>
                                    </MultiTrigger.Conditions>
                                    <Setter TargetName="root" Property="Background" Value="{StaticResource Toggle.Checked.Disabled.Background}"/>
                                    <Setter TargetName="thumb" Property="Stroke" Value="{StaticResource Toggle.Disabled.Thumb.BorderBrush}"/>
                                    <Setter TargetName="thumb" Property="Margin" Value="2"/>
                                </MultiTrigger>
                                <Trigger Property="IsEnabled" Value="False">
                                    <Setter Property="Foreground" Value="{StaticResource Toggle.Disabled.Foreground}"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style x:Key="FocusVisual">
                <Setter Property="Control.Template">
                    <Setter.Value>
                        <ControlTemplate>
                            <Rectangle Margin="2" StrokeDashArray="1 2" SnapsToDevicePixels="true" StrokeThickness="1" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <SolidColorBrush x:Key="ComboBoxItem.Background" Color="Transparent"/>
            <SolidColorBrush x:Key="ComboBoxItem.BorderBrush" Color="Transparent"/>
            <SolidColorBrush x:Key="ComboBoxItem.Hover.Background" Color="{StaticResource Color.Control.Background}"/>
            <SolidColorBrush x:Key="ComboBoxItem.Selected.Background" Color="{StaticResource Color.Accent}"/>
            <SolidColorBrush x:Key="ComboBoxItem.Selected.Foreground" Color="#ffffff"/>
            <SolidColorBrush x:Key="ComboBoxItem.Disabled.Foreground" Color="{StaticResource Color.Text.Disabled}"/>

            <Style x:Key="{x:Type ComboBoxItem}" TargetType="{x:Type ComboBoxItem}">
                <Setter Property="SnapsToDevicePixels" Value="True"/>
                <Setter Property="Padding" Value="8,3"/>
                <Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
                <Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
                <Setter Property="Background" Value="{StaticResource ComboBoxItem.Background}"/>
                <Setter Property="BorderBrush" Value="{StaticResource ComboBoxItem.BorderBrush}"/>
                <Setter Property="BorderThickness" Value="0"/>
                <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ComboBoxItem}">
                            <Border x:Name="Bd" CornerRadius="5" Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="true">
                                <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsEnabled" Value="False">
                                    <Setter Property="TextElement.Foreground" TargetName="Bd" Value="{StaticResource ComboBoxItem.Disabled.Foreground}"/>
                                </Trigger>
                                <MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition Property="IsSelected" Value="False"/>
                                        <Condition Property="IsMouseOver" Value="True"/>
                                    </MultiTrigger.Conditions>
                                    <Setter Property="Background" TargetName="Bd" Value="{StaticResource ComboBoxItem.Hover.Background}"/>
                                </MultiTrigger>
                                <Trigger Property="IsSelected" Value="True">
                                    <Setter Property="Background" TargetName="Bd" Value="{StaticResource ComboBoxItem.Selected.Background}"/>
                                    <Setter Property="Foreground" Value="{StaticResource ComboBoxItem.Selected.Foreground}"/>
                                </Trigger>
                                <MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition Property="IsSelected" Value="False"/>
                                        <Condition Property="IsKeyboardFocused" Value="True"/>
                                    </MultiTrigger.Conditions>
                                    <Setter Property="Background" TargetName="Bd" Value="{StaticResource ComboBoxItem.Hover.Background}"/>
                                </MultiTrigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
            <Style x:Key="ComboBoxEditableTextBox" TargetType="{x:Type TextBox}">
                <Setter Property="OverridesDefaultStyle" Value="true"/>
                <Setter Property="AllowDrop" Value="true"/>
                <Setter Property="MinWidth" Value="0"/>
                <Setter Property="MinHeight" Value="0"/>
                <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
                <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst"/>
                <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type TextBox}">
                            <ScrollViewer x:Name="PART_ContentHost" Background="Transparent" Focusable="false" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden"/>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <SolidColorBrush x:Key="ComboBox.Background" Color="{StaticResource Color.Control.Background}"/>
            <SolidColorBrush x:Key="ComboBox.Foreground" Color="{StaticResource Color.Text.Primary}"/>
            <SolidColorBrush x:Key="ComboBox.BorderBrush" Color="{StaticResource Color.Control.BorderBrush}"/>
            <SolidColorBrush x:Key="ComboBox.Hover.Background" Color="#ffffff"/>
            <SolidColorBrush x:Key="ComboBox.Open.Background" Color="#ffffff"/>
            <SolidColorBrush x:Key="ComboBox.Open.BorderBrush" Color="{StaticResource Color.Control.BorderBrush}"/>
            <SolidColorBrush x:Key="ComboBox.Popup.Background" Color="#ffffff"/>
            <SolidColorBrush x:Key="ComboBox.Popup.BorderBrush" Color="{StaticResource Color.Control.BorderBrush}"/>
            <SolidColorBrush x:Key="ComboBox.TextBox.Background" Color="#ffffff"/>
            <SolidColorBrush x:Key="ComboBox.TextBox.Focused.Foreground" Color="#000000"/>
            <SolidColorBrush x:Key="ComboBox.Editable.BorderBrush" Color="{StaticResource Color.Control.BorderBrush}"/>
            <SolidColorBrush x:Key="ComboBox.Disabled.Foreground" Color="{StaticResource Color.Text.Disabled}"/>
            <SolidColorBrush x:Key="ComboBox.Disabled.Background" Color="#d1d5db"/>
            <SolidColorBrush x:Key="ComboBox.Disabled.BorderBrush" Color="#d1d5db"/>

            <Style x:Key="ComboBoxToggleButton" TargetType="{x:Type ToggleButton}">
                <Setter Property="OverridesDefaultStyle" Value="true"/>
                <Setter Property="IsTabStop" Value="false"/>
                <Setter Property="Focusable" Value="false"/>
                <Setter Property="ClickMode" Value="Press"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ToggleButton}">
                            <Border x:Name="templateRoot" CornerRadius="5" Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" SnapsToDevicePixels="true">
                                <Border x:Name="splitBorder" BorderThickness="0" BorderBrush="Transparent" HorizontalAlignment="Right" Margin="0" SnapsToDevicePixels="true">
                                    <Path x:Name="arrow" Data="{StaticResource zi_cheveron-down}" Fill="{TemplateBinding Foreground}" HorizontalAlignment="Center" Margin="11,3" VerticalAlignment="Center"/>
                                </Border>
                            </Border>
                            <ControlTemplate.Triggers>
                                <DataTrigger Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="true">
                                    <Setter TargetName="arrow" Property="Margin" Value="0"/>
                                </DataTrigger>
                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="true"/>
                                        <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="true"/>
                                    </MultiDataTrigger.Conditions>
                                    <Setter Property="BorderBrush" TargetName="templateRoot" Value="{StaticResource ComboBox.Editable.BorderBrush}"/>
                                </MultiDataTrigger>
                                <DataTrigger Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="true">
                                    <Setter Property="Background" TargetName="templateRoot" Value="{StaticResource ComboBox.Hover.Background}"/>
                                </DataTrigger>
                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="false"/>
                                        <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="false"/>
                                    </MultiDataTrigger.Conditions>
                                    <Setter Property="Background" TargetName="templateRoot" Value="{StaticResource ComboBox.Disabled.Background}"/>
                                    <Setter Property="BorderBrush" TargetName="templateRoot" Value="{StaticResource ComboBox.Disabled.BorderBrush}"/>
                                </MultiDataTrigger>
                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="false"/>
                                        <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="true"/>
                                    </MultiDataTrigger.Conditions>
                                    <Setter Property="Background" TargetName="templateRoot" Value="{StaticResource ComboBox.Disabled.Background}"/>
                                    <Setter Property="BorderBrush" TargetName="templateRoot" Value="{StaticResource ComboBox.Disabled.BorderBrush}"/>
                                </MultiDataTrigger>
                                <DataTrigger Binding="{Binding IsDropDownOpen, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="True">
                                    <Setter TargetName="templateRoot" Property="Background" Value="{StaticResource ComboBox.Open.Background}"/>
                                    <Setter TargetName="templateRoot" Property="BorderBrush" Value="{StaticResource ComboBox.Open.BorderBrush}"/>
                                </DataTrigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
            <ControlTemplate x:Key="ComboBoxEditableTemplate" TargetType="{x:Type ComboBox}">
                <Grid x:Name="templateRoot" SnapsToDevicePixels="true">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="*"/>
                        <ColumnDefinition MinWidth="20" Width="0"/>
                    </Grid.ColumnDefinitions>
                    <Popup x:Name="PART_Popup" AllowsTransparency="true" Grid.ColumnSpan="2" IsOpen="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" Margin="1" Placement="Bottom" PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}">
                        <Border x:Name="shad" MinWidth="{Binding ActualWidth, ElementName=templateRoot}" MaxHeight="{TemplateBinding MaxDropDownHeight}" Margin="8">
                            <Border x:Name="dropDownBorder" Background="{StaticResource ComboBox.Popup.Background}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{StaticResource ComboBox.Popup.BorderBrush}" Padding="4" Margin="0,4" CornerRadius="5">
                                <ScrollViewer x:Name="DropDownScrollViewer">
                                    <Grid x:Name="grid" RenderOptions.ClearTypeHint="Enabled">
                                        <Canvas x:Name="canvas" HorizontalAlignment="Left" Height="0" VerticalAlignment="Top" Width="0">
                                            <Rectangle x:Name="opaqueRect" Fill="{Binding Background, ElementName=dropDownBorder}" Height="{Binding ActualHeight, ElementName=dropDownBorder}" Width="{Binding ActualWidth, ElementName=dropDownBorder}"/>
                                        </Canvas>
                                        <ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Contained" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                                    </Grid>
                                </ScrollViewer>
                            </Border>
                        </Border>
                    </Popup>
                    <ToggleButton x:Name="toggleButton" Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" Grid.ColumnSpan="2" IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" Style="{StaticResource ComboBoxToggleButton}"/>
                    <Border x:Name="border" Background="{StaticResource ComboBox.TextBox.Background}" Margin="{TemplateBinding BorderThickness}" CornerRadius="4">
                        <TextBox x:Name="PART_EditableTextBox" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" IsReadOnly="{Binding IsReadOnly, RelativeSource={RelativeSource TemplatedParent}}" Margin="0" Style="{StaticResource ComboBoxEditableTextBox}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Border>
                </Grid>
                <ControlTemplate.Triggers>
                    <Trigger Property="IsEnabled" Value="false">
                        <Setter Property="Opacity" TargetName="border" Value="0.56"/>
                    </Trigger>
                    <Trigger Property="IsKeyboardFocusWithin" Value="true">
                        <Setter TargetName="PART_EditableTextBox" Property="Foreground" Value="{StaticResource ComboBox.TextBox.Focused.Foreground}"/>
                    </Trigger>
                    <Trigger Property="HasDropShadow" SourceName="PART_Popup" Value="true">
                        <Setter TargetName="shad" Property="Effect">
                            <Setter.Value>
                                <DropShadowEffect BlurRadius="10" ShadowDepth="4" Opacity=".1" Direction="-90"/>
                            </Setter.Value>
                        </Setter>
                    </Trigger>
                    <Trigger Property="HasItems" Value="false">
                        <Setter Property="Height" TargetName="dropDownBorder" Value="95"/>
                    </Trigger>
                    <MultiTrigger>
                        <MultiTrigger.Conditions>
                            <Condition Property="IsGrouping" Value="true"/>
                            <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false"/>
                        </MultiTrigger.Conditions>
                        <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
                    </MultiTrigger>
                    <Trigger Property="ScrollViewer.CanContentScroll" SourceName="DropDownScrollViewer" Value="false">
                        <Setter Property="Canvas.Top" TargetName="opaqueRect" Value="{Binding VerticalOffset, ElementName=DropDownScrollViewer}"/>
                        <Setter Property="Canvas.Left" TargetName="opaqueRect" Value="{Binding HorizontalOffset, ElementName=DropDownScrollViewer}"/>
                    </Trigger>
                </ControlTemplate.Triggers>
            </ControlTemplate>
            <ControlTemplate x:Key="ComboBoxTemplate" TargetType="{x:Type ComboBox}">
                <Grid x:Name="templateRoot" SnapsToDevicePixels="true">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="*"/>
                        <ColumnDefinition Width="42"/>
                    </Grid.ColumnDefinitions>
                    <Popup x:Name="PART_Popup" AllowsTransparency="true" Grid.ColumnSpan="2" IsOpen="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" Margin="1" Placement="Bottom" PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}">
                        <Border x:Name="shad" MinWidth="{Binding ActualWidth, ElementName=templateRoot}" MaxHeight="{TemplateBinding MaxDropDownHeight}" Margin="8">
                            <Border x:Name="dropDownBorder" Background="{StaticResource ComboBox.Popup.Background}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{StaticResource ComboBox.Popup.BorderBrush}" Padding="4" Margin="0,4" CornerRadius="5">
                                <ScrollViewer x:Name="DropDownScrollViewer">
                                    <Grid x:Name="grid" RenderOptions.ClearTypeHint="Enabled">
                                        <Canvas x:Name="canvas" HorizontalAlignment="Left" Height="0" VerticalAlignment="Top" Width="0">
                                            <Rectangle x:Name="opaqueRect" Fill="{Binding Background, ElementName=dropDownBorder}" Height="{Binding ActualHeight, ElementName=dropDownBorder}" Width="{Binding ActualWidth, ElementName=dropDownBorder}"/>
                                        </Canvas>
                                        <ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Contained" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                                    </Grid>
                                </ScrollViewer>
                            </Border>
                        </Border>
                    </Popup>
                    <ToggleButton x:Name="toggleButton" Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" Grid.ColumnSpan="2" IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" Style="{StaticResource ComboBoxToggleButton}"/>
                    <ContentPresenter x:Name="contentPresenter" ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}" Content="{TemplateBinding SelectionBoxItem}" ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}" ContentStringFormat="{TemplateBinding SelectionBoxItemStringFormat}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" IsHitTestVisible="false" Margin="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                </Grid>
                <ControlTemplate.Triggers>
                    <Trigger Property="HasDropShadow" SourceName="PART_Popup" Value="true">
                        <Setter TargetName="shad" Property="Effect">
                            <Setter.Value>
                                <DropShadowEffect BlurRadius="10" ShadowDepth="4" Opacity=".1" Direction="-90"/>
                            </Setter.Value>
                        </Setter>
                    </Trigger>
                    <Trigger Property="HasItems" Value="false">
                        <Setter Property="Height" TargetName="dropDownBorder" Value="95"/>
                    </Trigger>
                    <MultiTrigger>
                        <MultiTrigger.Conditions>
                            <Condition Property="IsGrouping" Value="true"/>
                            <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false"/>
                        </MultiTrigger.Conditions>
                        <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
                    </MultiTrigger>
                    <Trigger Property="ScrollViewer.CanContentScroll" SourceName="DropDownScrollViewer" Value="false">
                        <Setter Property="Canvas.Top" TargetName="opaqueRect" Value="{Binding VerticalOffset, ElementName=DropDownScrollViewer}"/>
                        <Setter Property="Canvas.Left" TargetName="opaqueRect" Value="{Binding HorizontalOffset, ElementName=DropDownScrollViewer}"/>
                    </Trigger>
                </ControlTemplate.Triggers>
            </ControlTemplate>
            <Style TargetType="{x:Type ComboBox}">
                <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
                <Setter Property="Background" Value="{StaticResource ComboBox.Background}"/>
                <Setter Property="BorderBrush" Value="{StaticResource ComboBox.BorderBrush}"/>
                <Setter Property="Foreground" Value="{StaticResource ComboBox.Foreground}"/>
                <Setter Property="BorderThickness" Value="1"/>
                <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
                <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
                <Setter Property="Padding" Value="11,3,5,3"/>
                <Setter Property="ScrollViewer.CanContentScroll" Value="true"/>
                <Setter Property="ScrollViewer.PanningMode" Value="Both"/>
                <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
                <Setter Property="VerticalContentAlignment" Value="Center"/>
                <Setter Property="TextBlock.FontWeight" Value="DemiBold"/>
                <Setter Property="Template" Value="{StaticResource ComboBoxTemplate}"/>
                <Style.Triggers>
                    <Trigger Property="IsEditable" Value="true">
                        <Setter Property="IsTabStop" Value="false"/>
                        <Setter Property="Padding" Value="2"/>
                        <Setter Property="Template" Value="{StaticResource ComboBoxEditableTemplate}"/>
                    </Trigger>
                    <Trigger Property="IsEnabled" Value="False">
                        <Setter Property="Foreground" Value="{StaticResource ComboBox.Disabled.Foreground}"/>
                    </Trigger>
                </Style.Triggers>
            </Style>

            <SolidColorBrush x:Key="TextBox.Background" Color="#ffffff"/>
            <SolidColorBrush x:Key="TextBox.BorderBrush" Color="{StaticResource Color.Control.BorderBrush}"/>
            <SolidColorBrush x:Key="TextBox.Foreground" Color="{StaticResource Color.Text.Primary}"/>
            <SolidColorBrush x:Key="TextBox.Hover.BorderBrush" Color="{StaticResource Color.Accent}"/>
            <SolidColorBrush x:Key="TextBox.Disabled.Foreground" Color="{StaticResource Color.Text.Disabled}"/>

            <Style TargetType="{x:Type TextBox}">
                <Setter Property="Background" Value="{StaticResource TextBox.Background}"/>
                <Setter Property="BorderBrush" Value="{StaticResource TextBox.BorderBrush}"/>
                <Setter Property="Foreground" Value="{StaticResource TextBox.Foreground}"/>
                <Setter Property="BorderThickness" Value="1"/>
                <Setter Property="KeyboardNavigation.TabNavigation" Value="None"/>
                <Setter Property="HorizontalContentAlignment" Value="Left"/>
                <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
                <Setter Property="AllowDrop" Value="true"/>
                <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst"/>
                <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type TextBoxBase}">
                            <Border x:Name="border" Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" CornerRadius="3" SnapsToDevicePixels="True">
                                <ScrollViewer x:Name="PART_ContentHost" Focusable="false" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden"/>
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsEnabled" Value="false">
                                    <Setter Property="Foreground" Value="{StaticResource TextBox.Disabled.Foreground}"/>
                                </Trigger>
                                <Trigger Property="IsMouseOver" Value="true">
                                    <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource TextBox.Hover.BorderBrush}"/>
                                </Trigger>
                                <Trigger Property="IsKeyboardFocused" Value="true">
                                    <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource TextBox.Hover.BorderBrush}"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
                <Style.Triggers>
                    <MultiTrigger>
                        <MultiTrigger.Conditions>
                            <Condition Property="IsInactiveSelectionHighlightEnabled" Value="true"/>
                            <Condition Property="IsSelectionActive" Value="false"/>
                        </MultiTrigger.Conditions>
                        <Setter Property="SelectionBrush" Value="{DynamicResource {x:Static SystemColors.InactiveSelectionHighlightBrushKey}}"/>
                    </MultiTrigger>
                </Style.Triggers>
            </Style>

            <Style x:Key="OptionMarkFocusVisual">
                <Setter Property="Control.Template">
                    <Setter.Value>
                        <ControlTemplate>
                            <Rectangle Margin="14,0,0,0" StrokeDashArray="1 2" SnapsToDevicePixels="true" StrokeThickness="1" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <SolidColorBrush x:Key="CheckBox.Background" Color="#ffffff"/>
            <SolidColorBrush x:Key="CheckBox.BorderBrush" Color="{StaticResource Color.Control.BorderBrush}"/>
            <SolidColorBrush x:Key="CheckBox.Foreground" Color="{StaticResource Color.Text.Primary}"/>
            <SolidColorBrush x:Key="CheckBox.Mark" Color="{StaticResource Color.Accent}"/>
            <SolidColorBrush x:Key="CheckBox.Hover.Background" Color="{StaticResource Color.Control.Background}"/>
            <SolidColorBrush x:Key="CheckBox.Hover.BorderBrush" Color="{StaticResource Color.Accent}"/>
            <SolidColorBrush x:Key="CheckBox.Disabled.BorderBrush" Color="{StaticResource Color.Accent.Light}"/>
            <SolidColorBrush x:Key="CheckBox.Disabled.Mark" Color="{StaticResource Color.Accent.Light}"/>

            <Style TargetType="{x:Type CheckBox}">
                <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
                <Setter Property="Background" Value="{StaticResource CheckBox.Background}"/>
                <Setter Property="BorderBrush" Value="{StaticResource CheckBox.BorderBrush}"/>
                <Setter Property="Foreground" Value="{StaticResource CheckBox.Foreground}"/>
                <Setter Property="BorderThickness" Value="1"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type CheckBox}">
                            <Grid x:Name="templateRoot" Background="Transparent" SnapsToDevicePixels="True">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="Auto"/>
                                    <ColumnDefinition Width="*"/>
                                </Grid.ColumnDefinitions>
                                <Border x:Name="checkBoxBorder"
                                        Background="{TemplateBinding Background}"
                                        BorderThickness="{TemplateBinding BorderThickness}"
                                        BorderBrush="{TemplateBinding BorderBrush}"
                                        CornerRadius="3"
                                        HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                        VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                        MinHeight="20"
                                        MinWidth="20">
                                    <Grid x:Name="markGrid" VerticalAlignment="Center" HorizontalAlignment="Center">
                                        <Path x:Name="optionMark" Data="{StaticResource zi_checkmark}" Fill="{StaticResource CheckBox.Mark}" Height="16" Width="16" Margin="2" Opacity="0" Stretch="Uniform"/>
                                        <Rectangle x:Name="indeterminateMark" Fill="{StaticResource CheckBox.Mark}" Margin="3" Opacity="0"/>
                                    </Grid>
                                </Border>
                                <ContentPresenter x:Name="contentPresenter" Grid.Column="1" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                            </Grid>
                            <ControlTemplate.Triggers>
                                <Trigger Property="HasContent" Value="true">
                                    <Setter Property="FocusVisualStyle" Value="{StaticResource OptionMarkFocusVisual}"/>
                                    <Setter Property="Padding" Value="4,-1,0,0"/>
                                </Trigger>
                                <Trigger Property="IsMouseOver" Value="true">
                                    <Setter Property="Background" TargetName="checkBoxBorder" Value="{StaticResource CheckBox.Hover.Background}"/>
                                    <Setter Property="BorderBrush" TargetName="checkBoxBorder" Value="{StaticResource CheckBox.Hover.BorderBrush}"/>
                                </Trigger>
                                <Trigger Property="IsEnabled" Value="false">
                                    <Setter Property="BorderBrush" TargetName="checkBoxBorder" Value="{StaticResource CheckBox.Disabled.BorderBrush}"/>
                                    <Setter Property="Fill" TargetName="optionMark" Value="{StaticResource CheckBox.Disabled.Mark}"/>
                                    <Setter Property="Fill" TargetName="indeterminateMark" Value="{StaticResource CheckBox.Disabled.Mark}"/>
                                </Trigger>
                                <!--<Trigger Property="IsPressed" Value="true">
                                    <Setter Property="Background" TargetName="checkBoxBorder" Value="{StaticResource Brush.Accent.Light}"/>
                                </Trigger>-->
                                <Trigger Property="IsChecked" Value="true">
                                    <Setter Property="Opacity" TargetName="optionMark" Value="1"/>
                                    <Setter Property="Opacity" TargetName="indeterminateMark" Value="0"/>
                                </Trigger>
                                <Trigger Property="IsChecked" Value="{x:Null}">
                                    <Setter Property="Opacity" TargetName="optionMark" Value="0"/>
                                    <Setter Property="Opacity" TargetName="indeterminateMark" Value="1"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

        </ResourceDictionary>
    </Application.Resources>
</Application>
